// Generated by CoffeeScript 1.4.0

define(['text!templates/bit.handlebars', 'backbone', 'howler'], function(templateString, Backbone, Howl) {
  return Backbone.View.extend({
    initialize: function() {},
    onRender: function() {},
    onRendered: function() {
        return this.el;
    },
    onClose: function() {},
    onClosed: function() {},
    events:{
        "keypress input"  : "updateOnEnter",
    },
    updateOnEnter: function(e) {
      if (e.keyCode == 13){
          var newTime = parseFloat(this.$('input').val());
          this.$('x-timer')[0].total = newTime*60;
          this.$('x-timer')[0].stop();
          this.model.set('duration', newTime);
      }
    },
    close: function(removeElement) {
      if (removeElement == null) {
        removeElement = false;
      }
      if (this.onClose) {
        this.onClose();
      }
      this.undelegateEvents();
      this.$el.removeData().unbind();
      this.$el.empty();
      if (removeElement) {
        this.remove();
      }
      if (this.onClosed) {
        return this.onClosed();
      }
    },
    render: function() {
      var self = this;
      var data, template;
      this.onRender();
      template = Handlebars.compile(templateString);
      data = {};
      if (typeof this.model !== 'undefined') {
        data = this.model.attributes;
      }
      data.mins = data.duration*60;
      $(this.el).empty().append(template(data));
      this.$('x-timer')[0].addEventListener('done', function(e){
        var sound = new Howl({
          urls: ['scripts/framework/clong-2.mp3']
        }).play();
        console.log('finsihed timer');
        self.model.trigger('done', self.model.get('duration'));
        self.close(true);
      }, false);
      return this.onRendered();
    }
  });
});
