// Generated by CoffeeScript 1.4.0

define(['text!templates/miniByte.handlebars', 'backbone', 'marked', './byteView'], function(templateString, Backbone, marked, byteView) {
  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: true,
    smartLists: true,
    langPrefix: 'language-'
  });
  return Backbone.View.extend({
    className: 'mini-byte',
    initialize: function() {
        var close = function(){
            this.close(true);
        }
        this.model.on('destroy', close, this);
    },
    onRender: function() {},
    onRendered: function() {},
    onClose: function() {},
    onClosed: function() {},
    events: {
      'click': 'renderByte'
    },
    renderByte: function(){
      var done = new CustomEvent("delete");
      document.getElementById('bytePanel').dispatchEvent(done);
      var bigView = new byteView({model: this.model});
      bigView.render()
      $('#wordPanel').removeClass('active');
      $('#wordPanel').addClass('active2');
      $("#bytePanel").addClass('active');
    },
    close: function(removeElement) {
      if (removeElement == null) {
        removeElement = false;
      }
      if (this.onClose) {
        this.onClose();
      }
      this.undelegateEvents();
      this.$el.removeData().unbind();
      this.$el.empty();
      if (removeElement) {
        this.remove();
      }
      if (this.onClosed) {
        return this.onClosed();
      }
    },
    render: function() {
      var data, template;
      this.onRender();
      template = Handlebars.compile(templateString);
      data = {};
      if (typeof this.model !== 'undefined') {
        data = this.model.attributes;
      }
      $(this.el).empty().append(template(data));
      this.$('.description').empty().append(marked(this.model.get('description')));
      return this.onRendered();
    }
  });
});
