// Generated by CoffeeScript 1.4.0

define(['text!templates/byte.handlebars', 'backbone', 'models/bit', 'views/bitView', 'marked'], function(templateString, Backbone, Bit, bitView, marked) {
  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: true,
    smartLists: true,
    langPrefix: 'language-'
  });
  return Backbone.View.extend({
    el: $('#bytePanel'),
    initialize: function() {
        var self = this;
        this.model.on('change', self.render, this);
        this.el.addEventListener('delete', function(){self.close(false);}, false);
    },
    onRender: function() {},
    onRendered: function() {
        return this.el;
    },
    onClose: function() {},
    onClosed: function() {},
    events: {
        "click .add_bit" : "addBit",
        "blur .byte_name" : "updateName",
        "keypress .byte_name"  : "blurName",
        "focus .byte_description" : "rawDescription",
        "blur .byte_description" : "updateDescription"
    },
    blurName: function(e){
        if (e.keyCode == 13){
            this.$('.byte_name').blur();
        }
    },
    addBit: function(){
        var self = this;
        var newBit = new Bit();
        var newBitView = new bitView({model: newBit});
        this.$(".bits").append(newBitView.render());
        newBit.on('done', function(e){
            console.log('finished bit here');
            console.log(e);
            self.model.addBit(e);
        });
    },
    updateName: function(){
        this.model.set('name', this.$('.byte_name').html());
    },
    updateDescription: function(){
        this.model.set('description', this.$('.byte_description').html());
        this.$('.byte_description').empty().append(marked(this.model.get('description')));
    },
    rawDescription: function(){
        this.$('.byte_description').empty().append(this.model.get('description'));
    },
    close: function(removeElement) {
        console.log("closing byte");
      if (removeElement == null) {
        removeElement = false;
      }
      if (this.onClose) {
        this.onClose();
      }
      this.undelegateEvents();
      this.$el.removeData().unbind();
      this.$el.empty();
      if (removeElement) {
        this.remove();
      }
      if (this.onClosed) {
        return this.onClosed();
      }
    },
    render: function() {
      var data, template;
      this.onRender();
      template = Handlebars.compile(templateString);
      data = {};
      if (typeof this.model !== 'undefined') {
        data = this.model.attributes;
      }
      $(this.el).empty().append(template(data));
      this.$('.byte_description').empty().append(marked(this.model.get('description')));
      return this.onRendered();
    }
  });
});
