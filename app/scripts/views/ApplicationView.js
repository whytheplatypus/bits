// Generated by CoffeeScript 1.4.0

define(['text!templates/Application.handlebars', 'backbone', 'models/word', 'views/miniWordView'], function(templateString, Backbone, Word, miniWordView) {
  return Backbone.View.extend({
    initialize: function() {
      var self = this;
      this.model.on('change', this.render, this);
      this.model.on('add', function(model){model.commit();self.render();});
      this.model.fetch();
      //this.model.on('change', function(){console.log("saving");self.model.save()});
      //this.render();
    },
    onRender: function() {},
    onRendered: function() {
        /*var testByte = new Byte({name: "Test Byte", description:"__this__ is just a test"});
        var testByteView = new byteView({model: testByte});
        testByteView.render();
        $(this.el).append(testByteView.el);*/
        /*var testWord = new Word({name: "Test Word", description:"__this__ is just a test"});
        testWord.get('bytes').add({name: "Test Byte", description:"__this__ is just a test"});
        testWord.get('bytes').add({name: "Test Byte 2", description:"__this__ is just a test"});
        
        var testWordView = new wordView({model: testWord});
        testWordView.render();
        this.$('#wordPanel').append(testWordView.el);*/
    },
      
    events: {
        'click .add_word': 'addWord'
    },
    addWord: function(){
        //add words here
        var newWord = new Word({name: "New Word", description:"Click to edit"});
        this.model.add(newWord);
    },
    onClose: function() {},
    onClosed: function() {},
    close: function(removeElement) {
      if (removeElement == null) {
        removeElement = false;
      }
      if (this.onClose) {
        this.onClose();
      }
      this.undelegateEvents();
      this.$el.removeData().unbind();
      this.$el.empty();
      if (removeElement) {
        this.remove();
      }
      if (this.onClosed) {
        return this.onClosed();
      }
    },
    render: function() {
      console.log("rendering words list");
      var data, template;
      this.onRender();
      template = Handlebars.compile(templateString);
      data = {};
      if (typeof this.model !== 'undefined') {
        data = this.model.attributes;
      }
      $(this.el).empty().append(template(data));
      var words = this.$('.words');
      console.log(this.model);
      this.model.each(function(word){
        var miniword = new miniWordView({model: word});
        miniword.render();
        words.append(miniword.el);
      });
      return this.onRendered();
    }
  });
});
